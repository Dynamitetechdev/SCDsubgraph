// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DocumentUploaded extends ethereum.Event {
  get params(): DocumentUploaded__Params {
    return new DocumentUploaded__Params(this);
  }
}

export class DocumentUploaded__Params {
  _event: DocumentUploaded;

  constructor(event: DocumentUploaded) {
    this._event = event;
  }

  get documentUniqueId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get Registrant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MintedDocument extends ethereum.Event {
  get params(): MintedDocument__Params {
    return new MintedDocument__Params(this);
  }
}

export class MintedDocument__Params {
  _event: MintedDocument;

  constructor(event: MintedDocument) {
    this._event = event;
  }

  get documentUniqueIdInt(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferSuccess extends ethereum.Event {
  get params(): OwnershipTransferSuccess__Params {
    return new OwnershipTransferSuccess__Params(this);
  }
}

export class OwnershipTransferSuccess__Params {
  _event: OwnershipTransferSuccess;

  constructor(event: OwnershipTransferSuccess) {
    this._event = event;
  }

  get documentUniqueIdHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__getDocumentByIdResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get hash(): string {
    return this[1].toString();
  }

  get registrant(): Address {
    return this[2].toAddress();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkDocumentExistence(documentUniqueIdHash: Bytes): boolean {
    let result = super.call(
      "checkDocumentExistence",
      "checkDocumentExistence(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(documentUniqueIdHash)]
    );

    return result[0].toBoolean();
  }

  try_checkDocumentExistence(
    documentUniqueIdHash: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkDocumentExistence",
      "checkDocumentExistence(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(documentUniqueIdHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDocumentById(
    documentUniqueIdHash: Bytes
  ): Contract__getDocumentByIdResultValue0Struct {
    let result = super.call(
      "getDocumentById",
      "getDocumentById(bytes32):((string,string,address))",
      [ethereum.Value.fromFixedBytes(documentUniqueIdHash)]
    );

    return changetype<Contract__getDocumentByIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDocumentById(
    documentUniqueIdHash: Bytes
  ): ethereum.CallResult<Contract__getDocumentByIdResultValue0Struct> {
    let result = super.tryCall(
      "getDocumentById",
      "getDocumentById(bytes32):((string,string,address))",
      [ethereum.Value.fromFixedBytes(documentUniqueIdHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getDocumentByIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getOwnedDocuments(_registrant: Address): Array<Bytes> {
    let result = super.call(
      "getOwnedDocuments",
      "getOwnedDocuments(address):(bytes32[])",
      [ethereum.Value.fromAddress(_registrant)]
    );

    return result[0].toBytesArray();
  }

  try_getOwnedDocuments(
    _registrant: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getOwnedDocuments",
      "getOwnedDocuments(address):(bytes32[])",
      [ethereum.Value.fromAddress(_registrant)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uploadDocument(_name: string, _hash: string): Bytes {
    let result = super.call(
      "uploadDocument",
      "uploadDocument(string,string):(bytes32)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_hash)]
    );

    return result[0].toBytes();
  }

  try_uploadDocument(_name: string, _hash: string): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "uploadDocument",
      "uploadDocument(string,string):(bytes32)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferDocumentOwnershipCall extends ethereum.Call {
  get inputs(): TransferDocumentOwnershipCall__Inputs {
    return new TransferDocumentOwnershipCall__Inputs(this);
  }

  get outputs(): TransferDocumentOwnershipCall__Outputs {
    return new TransferDocumentOwnershipCall__Outputs(this);
  }
}

export class TransferDocumentOwnershipCall__Inputs {
  _call: TransferDocumentOwnershipCall;

  constructor(call: TransferDocumentOwnershipCall) {
    this._call = call;
  }

  get documentUniqueIdHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferDocumentOwnershipCall__Outputs {
  _call: TransferDocumentOwnershipCall;

  constructor(call: TransferDocumentOwnershipCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UploadDocumentCall extends ethereum.Call {
  get inputs(): UploadDocumentCall__Inputs {
    return new UploadDocumentCall__Inputs(this);
  }

  get outputs(): UploadDocumentCall__Outputs {
    return new UploadDocumentCall__Outputs(this);
  }
}

export class UploadDocumentCall__Inputs {
  _call: UploadDocumentCall;

  constructor(call: UploadDocumentCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _hash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UploadDocumentCall__Outputs {
  _call: UploadDocumentCall;

  constructor(call: UploadDocumentCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
